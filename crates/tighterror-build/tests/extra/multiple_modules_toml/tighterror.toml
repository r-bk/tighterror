[[modules]]
name = "internal_errors"
doc = "Internal errors."
doc_from_display = true

[[modules.categories]]
name = "Parser"
doc = "Parser errors category."

[[modules.categories.errors]]
name = "BAD_FILE"
display = "Configuration file is malformed."

[[modules.categories]]
name = "Processor"
doc = "Processor errors category."

[[modules.categories.errors]]
name = "BAD_FILE"
display = "Processor file is malformed or missing."

[[modules.categories.errors]]
name = "BAD_STATE"
display = "Internal error, state mismatch."

[[modules]]
name = "errors"
doc = "Public errors."
doc_from_display = true
err_doc = "A custom error struct doc."
err_kind_doc = "A custom error doc."
err_cat_doc = "A custom category doc."
error_trait = true
result_from_err = true
result_from_err_kind = true
err_name = "McError"
err_kind_name = "McErrorKind"
err_cat_name = "McErrorCategory"

[[modules.categories]]
name = "Parsing"
doc = "Parsing errors category."

[[modules.categories.errors]]
name = "BAD_TOKEN"
display = "Decoded an invalid token."

[[modules.categories.errors]]
name = "QUEUE_FULL"
display = "Parsing queue is full."

[[modules.categories]]
name = "Processing"
doc = "Processing errors category."

[[modules.categories.errors]]
name = "OUT_OF_MEMORY"
display = "Memory pool is empty."

[[modules.categories.errors]]
name = "QUEUE_FULL"
display = "Processing queue is full."

[[modules.categories]]
name = "General"
doc = "General errors category."

[[modules.categories.errors]]
name = "BAD_ARG"
display = "Invalid argument received."
doc = """
An invalid argument was received.

# Examples

```rust
# struct Error;
# impl From<u32> for Error {
#     fn from(v: u32) -> Self {
#         Self{}
#     }
# }
# const BAD_ARG: u32 = 0;
let e: Error = BAD_ARG.into();
```
"""

[[modules.categories.errors]]
name = "TIMEOUT"
display = "Operation timed out."
